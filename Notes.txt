Design principle: incapsulate what varies
Design principle: program to an interface, not an implementation
Design principle: favor composition over inheritance
Design principle: strive for loosely coupled designs between objects that interact
Design principle: classes should be open for extension, but closed for modification
Design principle: Abstractions should never depend upon details. Detail

HAS-A; IS-A; IMPLEMENTS

What are design patterns good for?
- it sets a vocabulary that can be used between developers
- patterns allow to say more with less
- talking using patterns allows you to keep the discussion at the design level

Interface Segragation Principle:

This is a direct result of respecting the Interface Segregation Principle (ISP) which promotes the idea that interfaces should reflect the needs of the clients. Interfaces belong to the clients, and thus they are named to reflect the types and objects the clients need and they will contain methods the clients wants to use.

Dependency Inversion Principle: 

Respecting DIP will:

	- Almost force you into respecting OCP.
	- Allow you to separate responsibilities.
	- Make you correctly use subtyping.
	- Offer you the opportunity to segregate your interfaces.

	- As to why it is important, in short: changes are risky, and by depending on a concept instead of on an implementation, you reduce the need for change at call sites.


Strategy pattern:
	
Think of the Strategy Pattern as a flexible alternative to subclassing; if you use inheritance to define the behavior of a class, then youâ€™re stuck with that behavior even if you need to change it. With Strategy you can change the behavior by composing with a different object.

State pattern:

Think of the State Pattern as an alternative to putting lots of conditionals in your context; by encapsulating the behaviors within state objects, you can simply change the state object in context to change its behavior.


Patterns in general:

If two patterns are simmilar, then it's all about the intent of each pattern